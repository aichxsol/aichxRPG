from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext
import random
import json

# Replace this with your own bot token
API_TOKEN = '7388591660:AAF8aqOXOu-byvLCvqAKcBo3B4m0hhvIlkM'  # Put your bot token here

# Global data to track user information and leaderboard
user_data = {}
leaderboard = {}

# /start command - Welcome message
def start(update: Update, context: CallbackContext):
    update.message.reply_text("Welcome to the PvP RPG Game! Type /help to see available commands.")

# /help command - Show instructions
def help(update: Update, context: CallbackContext):
    update.message.reply_text(
        "Commands:\n"
        "/start - Start the bot and get a welcome message.\n"
        "/battle <username> - Challenge another player to a PvP battle.\n"
        "/leaderboard - View the top players based on total XP.\n"
    )

# /battle command - Start a PvP battle
def battle(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    target_user = context.args[0] if context.args else None

    if target_user is None:
        update.message.reply_text("Please specify a player to battle (e.g., /battle <username>).")
        return

    if target_user == str(user_id):
        update.message.reply_text("You can't battle yourself!")
        return

    # Ensure both players exist in the user data
    if user_id not in user_data:
        user_data[user_id] = {'health': 100, 'attack': 10, 'xp': 0, 'name': update.message.from_user.username}
    if target_user not in user_data:
        update.message.reply_text(f"The user {target_user} doesn't exist.")
        return

    # Battle simulation
    user_attack = random.randint(5, user_data[user_id]['attack'])
    target_attack = random.randint(5, user_data[int(target_user)]['attack'])

    user_data[user_id]['health'] -= target_attack
    user_data[int(target_user)]['health'] -= user_attack

    battle_message = f"Battle between {user_data[user_id]['name']} and {user_data[int(target_user)]['name']}!\n"
    battle_message += f"{user_data[user_id]['name']} attacks with {user_attack} damage!\n"
    battle_message += f"{user_data[int(target_user)]['name']} attacks with {target_attack} damage!\n"
    battle_message += f"{user_data[user_id]['name']} has {user_data[user_id]['health']} health left.\n"
    battle_message += f"{user_data[int(target_user)]['name']} has {user_data[int(target_user)]['health']} health left.\n"

    if user_data[user_id]['health'] <= 0 and user_data[int(target_user)]['health'] <= 0:
        battle_message += "It's a draw!"
    elif user_data[user_id]['health'] <= 0:
        battle_message += f"{user_data[int(target_user)]['name']} wins! +5 XP"
        user_data[int(target_user)]['xp'] += 5
    elif user_data[int(target_user)]['health'] <= 0:
        battle_message += f"{user_data[user_id]['name']} wins! +5 XP"
        user_data[user_id]['xp'] += 5

    # Update leaderboard
    update_leaderboard(user_data[user_id], user_data[int(target_user)])

    update.message.reply_text(battle_message)

# /leaderboard command - Show the leaderboard
def leaderboard(update: Update, context: CallbackContext):
    sorted_leaderboard = sorted(user_data.values(), key=lambda x: x['xp'], reverse=True)
    leaderboard_message = "Leaderboard:\n"
    for index, player in enumerate(sorted_leaderboard[:10]):
        leaderboard_message += f"{index + 1}. {player['name']} - {player['xp']} XP\n"
    update.message.reply_text(leaderboard_message)

# Helper function to update leaderboard
def update_leaderboard(user, target):
    global leaderboard
    leaderboard[user['name']] = user['xp']
    leaderboard[target['name']] = target['xp']

def main():
    # Create the Updater and pass the bot's API token
    updater = Updater(API_TOKEN, use_context=True)

    # Get the dispatcher to register handlers
    dp = updater.dispatcher

    # Register command handlers
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help))
    dp.add_handler(CommandHandler("battle", battle))
    dp.add_handler(CommandHandler("leaderboard", leaderboard))

    # Start the bot by polling for new messages
    updater.start_polling()

    # Run the bot until you stop it
    updater.idle()

if __name__ == '__main__':
    main()
python-telegram-bot==13.7
Flask==2.0.1
